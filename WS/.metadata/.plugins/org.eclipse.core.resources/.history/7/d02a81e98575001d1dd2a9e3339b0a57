/*------------------------------------------------------------------------------
 * File          : input_handler.sv
 * Project       : RTL
 * Author        : epebar
 * Creation date : Oct 15, 2022
 * Description   :
 *------------------------------------------------------------------------------*/

module input_handler #(
	parameter WINDOW_SIZE = 128, 
			  KMER_SIZE = 16
	)(
	  input logic hashing_is_done,
	  output logic  [1:0]                     window       [0:WINDOW_SIZE-1],// consists of WINDOW_SIZE kmers
	  output logic [31:0] windowID,
	  output logic window_reset,
	  output logic ready_for_hashing,
	  output logic isInsert,
	  output logic isQuery
	  );


int fd;
int i = 0;
int j = 0;
int k = 0;
logic [7:0] temp;
logic isReference;
int dummy;
string file_name;
string file_number;


// turning sections from read and reference files to windows, handling required flags 
task window_maker(int fd, logic isReference);
	
	// flags reset
	isInsert = 1'b0;
	isQuery = 1'b0;
	
	while(!($feof(fd))) begin
		ready_for_hashing = 1'b0;
		window_reset = 1'b1;
		#1
		window_reset = 1'b0;
		
		// assigning to window according to nucleotides in file
		for(int j = 0 ; j < WINDOW_SIZE ; j++) begin
			temp = $fgetc(fd);
			case (temp)
				"A": window[j] = 2'b00;
				"C": window[j] = 2'b01;
				"G": window[j] = 2'b10;
				"T": window[j] = 2'b11;
			endcase
		 
		end
		windowID = i;
		ready_for_hashing = 1'b1;
		while (!(hashing_is_done)) begin
			#1;
		end
		if (isReference) begin
			isInsert = 1'b1;
			#1;
			end
		else
			isQuery = 1'b1;
			#1
		//#2
		if(!($feof(fd))) begin
			i++;
			dummy = $fseek(fd, (WINDOW_SIZE - KMER_SIZE + 1) * i, 0);
		end
	end
endtask

initial begin
	
	// opening reference file
	fd = $fopen("reference_sv", "r");
	isReference = 1'b1;
	window_maker(fd, isReference);
	
	// opening read files
	while (1'b1) begin
		$sformat(file_number, j);
		file_name = {"read_sv_", file_number};
		if((fd = $fopen(file_name, "r")) == 0 ) begin
			break;
		end	
		j++;
		isReference = 1'b0;
		window_maker(fd, isReference);	
	end
	

	$fclose(fd);
end
endmodule
 